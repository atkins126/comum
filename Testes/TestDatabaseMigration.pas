unit TestDatabaseMigration;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Database.IDataseMigration,
  System.Generics.Collections,
  Database.TDataseMigrationBase,
  Database.SGDB,
  Dao.Conection.Parametros,
  Dao.Conection.Firedac,
  Dao.IConection,
  Database.Version, DataBase.MigrationLocal, Test.Model.Log;

type
  // Test methods for class IDataseMigration

  TestIDataseMigration = class(TTestCase)
  strict private
    FIDataseMigration: IDataseMigration;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestMigrate;
   // procedure TestGetErros;
  end;

implementation

procedure TestIDataseMigration.SetUp;
var
  conexao: TFiredacConection;
  versao: TDatabaseVersion;
begin
  conexao := TFiredacConection.Create(
    TConectionParametros.Create(
    tpSqlServer,
    'localhost',
    'pdvsn',
    'rm',
    'rm',
    'Teste',
    0
    )
    );

  //  conexao := TFiredacConection.Create(
  //    TConectionParametros.Create(
  //    tpOracle,
  //    'localhost',
  //    'orcl',
  //    'rm',
  //    'rm',
  //    'Teste',
  //    1521
  //    )
  //    );

  versao := TDatabaseVersion.Create(conexao);

  // TODO: Initialize FIDataseMigration
  FIDataseMigration := TMigrationLocal.Create(conexao, versao, tpSqlServer,
    TLogTeste.New);
end;

procedure TestIDataseMigration.TearDown;
begin
  //FIDataseMigration := nil;
end;

procedure TestIDataseMigration.TestMigrate;
begin
  FIDataseMigration.Migrate;
end;

//procedure TestIDataseMigration.TestGetErros;
//var
//  ReturnValue: TDictionary<TClass, string>;
//begin
//  ReturnValue := FIDataseMigration.GetErros;
//  // TODO: Validate method results
//end;

initialization

  // Register any test cases with the test runner
  RegisterTest(TestIDataseMigration.Suite);

end.

