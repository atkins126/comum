unit TestJSonUtils;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.JSON, System.TypInfo, System.Rtti,
  System.Classes, Test.Model.Pedido, Test.Model.Item, Test.Model.Produto,
  System.Generics.Collections, Model.ModelBase, Helpers.HelperObject, JSON.Utils;

type
  // Test methods for class TJSONUtil

  TestTJSONUtil = class(TTestCase)
  strict private
    Models: TList<TModelBase>;
  private
    function PedidoTeste: TPedido;
    function ProdutoTeste: TProduto;
    function PedidoJson: string;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestToJSON;
    procedure TestFromJSON;
  end;

implementation

procedure TestTJSONUtil.SetUp;
begin
  Models := TList<TModelBase>.Create;
end;

function TestTJSONUtil.ProdutoTeste(): TProduto;
begin
  result := TProduto.Create;
  result.CODIGO := Random(999999).ToString.PadLeft(6);
  result.BARRAS := Random(999999999).ToString.PadLeft(6);
  result.DESCRICAO := 'Teste de Porduto' + result.CODIGO;
  result.UND := 'UN';
  result.CUSTO_MEDIO := 22.56;
  result.PRECO_CUSTO := 22.80;
  result.PRECO_VENDA := 33.25;
  result.PRECO_ATACADO := 32.00;
  result.MARGEM_LUCRO := 0.05;
  result.ALTERACAO_PRECO := date;
  result.ULTIMA_COMPRA := date;
  result.DATA_CADASTRO := date;
  result.ULTIMA_VENDA := now;
  result.BLOQUEADO := False;
  result.OBSERVACOES := 'Teste de Dao;βινστγυ';
  result.QUANTIDADEFRACIONADA := True;
  // result.MENSAGEMRETORNO := GetXML;

  Models.Add(result);
end;

function TestTJSONUtil.PedidoJson: string;
var
  jsonString: TStringBuilder;
begin
  jsonString := TStringBuilder.Create;
  jsonString.Append('{"id":23232,"numero":"3183","datapedido":"2018-06-22T19:07:50.760-03:00",');
  jsonString.Append('"horapedido":"1899-12-30T19:07:50.760-02:00","observacao":"Pedido Teste","valorbruto":91286,"itemcount":3,');
  jsonString.Append('"valordesc":0.2,"valorentrada":11.22,"valorliquido":91274.58,');
  jsonString.Append('"itens":[{"seq":1,"idpedido":0,"codproduto":"291501","descricao":"93482236","und":"UN","qtd":99,');
  jsonString.Append('"valor_unita":409,"valor_desconto":0.6,"valor_total":40490.4,"datadavenda":"2018-06-22T19:07:50.760-03:00",');
  jsonString.Append('"status":"A","statusbd":"stNenhum"},{"seq":2,"idpedido":0,"codproduto":"700205","descricao":"912043994",');
  jsonString.Append('"und":"UN","qtd":55,"valor_unita":917,"valor_desconto":0.7,"valor_total":50434.3,');
  jsonString.Append('"datadavenda":"2018-06-22T19:07:50.761-03:00","status":"A","statusbd":"stNenhum"},');
  jsonString.Append('{"seq":3,"idpedido":0,"codproduto":"763192","descricao":"841647642","und":"UN","qtd":1,');
  jsonString.Append('"valor_unita":362,"valor_desconto":0.7,"valor_total":361.3,"datadavenda":"2018-06-22T19:07:50.761-03:00",');
  jsonString.Append('"status":"A","statusbd":"stNenhum"}],"statusbd":"stNenhum"}');

  result := jsonString.ToString;

  jsonString.Free;

end;

function TestTJSONUtil.PedidoTeste: TPedido;
var
  Item: TItemPedido;
  Produto: TProduto;
begin
  result := TPedido.Create;
  result.NUMERO := Random(99999).ToString;
  result.DATAPEDIDO := now;
  result.HORAPEDIDO := Time;
  result.OBSERVACAO := 'Pedido Teste';
  result.VALORDESC := 0.20;
  result.ValorEntrada := 11.22;
  Models.Add(result);

  Item := TItemPedido.Create;

  Produto := ProdutoTeste();
  Item.SEQ := 1;
  Item.CODPRODUTO := Produto.CODIGO;
  Item.DESCRICAO := Produto.BARRAS;
  Item.UND := Produto.UND;
  Item.QTD := 99;
  Item.VALOR_UNITA := Round(Random(9999) * 0.1);
  Item.VALOR_DESCONTO := 0.6;
  Item.STATUS := 'A';
  result.Itens.Add(Item);
  Models.Add(Item);

  Produto := ProdutoTeste();
  Item := TItemPedido.Create;
  Item.SEQ := 2;
  Item.CODPRODUTO := Produto.CODIGO;
  Item.DESCRICAO := Produto.BARRAS;
  Item.UND := Produto.UND;
  Item.QTD := 55;
  Item.VALOR_UNITA := Round(Random(9999) * 0.1);
  Item.VALOR_DESCONTO := 0.7;
  Item.STATUS := 'A';
  result.Itens.Add(Item);
  Models.Add(Item);

  Produto := ProdutoTeste();
  Item := TItemPedido.Create;
  Item.SEQ := 3;
  Item.CODPRODUTO := Produto.CODIGO;
  Item.DESCRICAO := Produto.BARRAS;
  Item.UND := Produto.UND;
  Item.QTD := 1;
  Item.VALOR_UNITA := Round(Random(9999) * 0.1);
  Item.VALOR_DESCONTO := 0.7;
  Item.STATUS := 'A';
  result.Itens.Add(Item);
  Models.Add(Item);

end;

procedure TestTJSONUtil.TearDown;
var
  Model: TModelBase;
begin
  Models.Free;
  Models := nil;
end;

procedure TestTJSONUtil.TestToJSON;
var
  ReturnValue: TJSONValue;
  obj: TPedido;
begin
  // TODO: Setup method call parameters
  obj := PedidoTeste();
  ReturnValue := TJSONUtil.ToJSON<TPedido>(obj);
  CheckTrue(ReturnValue.ToString <> '');
end;

procedure TestTJSONUtil.TestFromJSON;
var
  ReturnValue: TPedido;
  obj: TJSONObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := TJSONUtil.FromJSON<TPedido>(PedidoJson());
  CheckNotNull(ReturnValue);
  CheckEquals(ReturnValue.Itens[0].SEQ, 1);
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTJSONUtil.Suite);

end.
