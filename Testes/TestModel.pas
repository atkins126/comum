unit TestModel;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Bindings.Expression,
  System.Generics.Collections, Model.ModelBase, Model.IObserve, System.Classes,
  Model.IModelBase, System.Bindings.Helper, System.Rtti,
  Test.Model.Observer, Test.Model.Produto, Test.Model.Pedido, Test.Model.Item;

type
  // Test methods for class TModelBase

  TestTModelBase = class(TTestCase)
  strict private
    FModelBase: TPedido;
  private
    procedure CheckItemPedido(Item, ItemBD: TItemPedido);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published

    procedure TestNotifyObservers;
    procedure TestClone;
  end;

implementation

procedure TestTModelBase.SetUp;
begin
  FModelBase := TPedido.Create;
  ReportMemoryLeaksOnShutdown := True;
end;

procedure TestTModelBase.TearDown;
begin
  FreeAndNil(FModelBase);
end;

procedure TestTModelBase.TestClone;
var
  Item: TItemPedido;
  PedidoClone: TPedido;
  I: Integer;
begin
//  FModelBase := TPedido.Create;
//  FModelBase.NUMERO := Random(99999).ToString;
//  FModelBase.DATAPEDIDO := now;
//  FModelBase.HORAPEDIDO := Time;
//  FModelBase.OBSERVACAO := 'Pedido Teste';
//  FModelBase.VALORDESC := 0.20;
//  FModelBase.ValorEntrada := 11.22;

//  Item := TItemPedido.Create;
//
//  Item.SEQ := 1;
//  Item.CODPRODUTO := '1213';
//  Item.DESCRICAO := '65655';
//  Item.UND := 'UN';
//  Item.QTD := 99;
//  Item.VALOR_UNITA := Round(Random(9999) * 0.1);
//  Item.VALOR_DESCONTO := 0.6;
//  Item.STATUS := 'A';
//  FModelBase.Itens.Add(Item);
//
//  Item := Item.New as TItemPedido;
//  Item.SEQ := 2;
//  Item.CODPRODUTO := '1444';
//  Item.DESCRICAO := '344444';
//  Item.UND := 'UN';
//  Item.QTD := 199;
//  Item.VALOR_UNITA := Round(Random(9999) * 0.1);
//  Item.VALOR_DESCONTO := 0.2;
//  Item.STATUS := 'V';
//  FModelBase.Itens.Add(Item);

//  PedidoClone := FModelBase.Clone as TPedido;
//
//  CheckEquals(FModelBase.NUMERO, PedidoClone.NUMERO);
//  CheckEquals(FModelBase.DATAPEDIDO, PedidoClone.DATAPEDIDO);
//  CheckEquals(FModelBase.HORAPEDIDO, PedidoClone.HORAPEDIDO);
//  CheckEquals(FModelBase.OBSERVACAO, PedidoClone.OBSERVACAO);
//  CheckEquals(FModelBase.VALORDESC, PedidoClone.VALORDESC);
//  CheckEquals(FModelBase.ValorEntrada, PedidoClone.ValorEntrada);
//  CheckEquals(FModelBase.Itens.Count, PedidoClone.Itens.Count);
//  PedidoClone.NUMERO := '9999999999';

//  for I := 0 to pred(PedidoClone.Itens.Count) do
//  begin
//    CheckItemPedido(PedidoClone.Itens[I], FModelBase.Itens[I]);
//  end;
//
//  PedidoClone.Itens[0].CODPRODUTO := 'xxxxx';
//
//  CheckNotEquals(PedidoClone.Itens[0].CODPRODUTO, FModelBase.Itens[0].CODPRODUTO);

end;

procedure TestTModelBase.CheckItemPedido(Item: TItemPedido; ItemBD: TItemPedido);
begin
  CheckEquals(Item.SEQ, ItemBD.SEQ);
  CheckEquals(Item.IDPEDIDO, ItemBD.IDPEDIDO);
  CheckEquals(Item.CODPRODUTO, ItemBD.CODPRODUTO);
  CheckEquals(Item.DESCRICAO, ItemBD.DESCRICAO);
  CheckEquals(Item.UND, ItemBD.UND);
  CheckEquals(Item.QTD, ItemBD.QTD);
  CheckEquals(Item.VALOR_UNITA, ItemBD.VALOR_UNITA);
  CheckEquals(Item.VALOR_DESCONTO, ItemBD.VALOR_DESCONTO);
  CheckEquals(Item.VALOR_TOTAL, ItemBD.VALOR_TOTAL);
  CheckEquals(Item.STATUS, ItemBD.STATUS);
end;

procedure TestTModelBase.TestNotifyObservers;
const
  MAX: Integer = 300;
var
  Observer: TModelObserver;
  Lista: TObjectList<TModelObserver>;
  I: Integer;
begin

  // ambiente
  Lista := TObjectList<TModelObserver>.Create(False);

  for I := 0 to MAX do
  begin
    Observer := TModelObserver.Create;
    Lista.Add(Observer);
    FModelBase.addObserver(Observer);
  end;

  // teste
  FModelBase.NotifyObservers;

  for I := 0 to MAX do
  begin
    CheckTrue(Lista[I].Notificado);
    Lista[
      I].clear;
  end;

  // verificar uma seginda chamada
  FModelBase.NotifyObservers;

  for I := 0 to MAX do
  begin
    CheckTrue(Lista[I].Notificado);
    Lista[I].clear;
  end;

  // removert os observer da lista
  for I := 0 to MAX do
  begin
    FModelBase.removeObserver(Lista[I]);
  end;

  // testar novamente a notificação
  FModelBase.NotifyObservers;

  Lista.clear;
  FreeAndNil(Lista);
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTModelBase.Suite);

end.
